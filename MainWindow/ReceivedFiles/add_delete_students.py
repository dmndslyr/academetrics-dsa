"""
This is a back-end code for adding and removing student, place this py file on the same directory as the
addAndRemoveStudent.py. Also, use your personal db and table name, column names, or else it wouldn't work.
The table used in this code is CREATE TABLE "class" ("student_id"	TEXT NOT NULL, "full_name"	TEXT NOT NULL,
                                PRIMARY KEY("student_id"));
Do not edit this file unless you know what you are doing.
"""

import sqlite3
import re


# For adding student in db
def add_student(student_data):
    connection = None
    cursor = None
    try:
        connection = sqlite3.connect('ryan_test_db_1.db')  # Use your db for all
        cursor = connection.cursor()

        student_to_add_data = "INSERT INTO class ('student_id', 'full_name') VALUES (?, ?)"  # Use your own table
        cursor.execute(student_to_add_data, student_data)
        connection.commit()
        print("Student added successfully.")
    except sqlite3.Error as e:
        print("Database error:", e)
        # Handle the error (e.g., show an error message)

    finally:
        cursor.close()
        connection.close()


# For deleting student in db based on id
def delete_student(student_id):
    connection = None
    cursor = None
    try:
        connection = sqlite3.connect('ryan_test_db_1.db')
        cursor = connection.cursor()

        delete_query = "DELETE FROM class WHERE student_id = ?"
        cursor.execute(delete_query, (student_id,))
        connection.commit()

        if cursor.rowcount > 0:
            print(f"Student with ID {student_id} deleted successfully.")
        else:
            print(f"No student found with ID {student_id}.")

    except sqlite3.Error as e:
        print("Database error:", e)
        # Handle the error (e.g., show an error message)

    finally:
        if connection:
            cursor.close()
            connection.close()


# For matched ids
def check_id_value(id_add):
    connection = None  # Initialize the variable outside the try block
    try:
        connection = sqlite3.connect('ryan_test_db_1.db')
        cursor = connection.cursor()

        match_query = "SELECT * FROM class WHERE student_id = ?"
        cursor.execute(match_query, (id_add,))
        result = cursor.fetchone()

        if result:
            return True
        else:
            return False

    except sqlite3.Error as e:
        print(f"Error: {e}")
        return False

    finally:
        if connection:
            connection.close()


# For blank inputs
def check_if_blank(user_input):
    if user_input == '':
        # When user_input is blank
        print("User input is blank.")
        return True
    else:
        return False


# For capitalization
def auto_capitalize(input_string):
    # Split the input string into a list of words
    words = input_string.split()

    # Capitalize each word and join them back into a string
    capitalized_words = [word.capitalize() for word in words]
    capitalized_string = ' '.join(capitalized_words)

    return capitalized_string


# CHeck if psu id pattern
def validate_id_input(id_input):
    # Define the pattern using regular expression
    pattern = re.compile(r'^(\d{2})-([A-Za-z]{2})-(\d{4})$')

    # Check if the input matches the pattern
    match = pattern.match(id_input)

    return bool(match)


def format_id_input(id_input):
    # Define the pattern using regular expression
    pattern = re.compile(r'^(\d{2})-([A-Za-z]{2})-(\d{4})$')

    # Check if the input matches the pattern
    match = pattern.match(id_input)

    if match:
        # Extract groups from the match
        groups = match.groups()

        # Capitalize the letters in the middle group
        middle_group = groups[1].upper()

        # Format the output
        formatted_output = f'{groups[0]}-{middle_group}-{groups[2]}'
        return formatted_output
    else:
        return None
